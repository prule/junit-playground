# Without parallel, the tests will run sequentially - seems to be a deterministic order:
#    appHasAGreeting 1a
#    appHasAGreeting 1b
#    appHasAGreeting 1c
#    appHasAGreeting 2a
#    appHasAGreeting 2b
#    appHasAGreeting 2c

#junit.jupiter.execution.parallel.enabled = false

# With parallel, the tests will run concurrently and in a random order:
# Run 1:
#    appHasAGreeting 2b
#    appHasAGreeting 1a
#    appHasAGreeting 2c
#    appHasAGreeting 2a
#    appHasAGreeting 1c
#    appHasAGreeting 1b
# Run 2:
#    appHasAGreeting 1a
#    appHasAGreeting 2a
#    appHasAGreeting 1b
#    appHasAGreeting 2c
#    appHasAGreeting 1c
#    appHasAGreeting 2b

junit.jupiter.execution.parallel.enabled = true
junit.jupiter.execution.parallel.mode.default = concurrent

# Custom ordering of classes
junit.jupiter.testclass.order.default = org.example.JunitClassOrdering


#https://docs.gradle.org/current/userguide/jvm_test_suite_plugin.html
#https://tomgregory.com/gradle/gradle-integration-tests/